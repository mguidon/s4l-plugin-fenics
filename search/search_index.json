{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sim4Life FEniCS Plugin Documentation","text":""},{"location":"#introduction","title":"Introduction","text":"<p>The FEniCS solver in this plugin provides a modular finite element simulation backend for Sim4Life. It leverages the FEniCS finite element library to solve a wide range of partial differential equations (PDEs) defined within the Sim4Life environment. The solver supports stationary (steady-state), eigenvalue, and time-domain (transient) simulations, making it suitable for a variety of physical modeling tasks.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>General PDE Solving: Supports the solution of general PDEs using the finite element method.</li> <li>Multiple Simulation Types: Handles stationary, eigenvalue, and time-domain problems.</li> <li>Sim4Life Integration: Reads simulation definitions, meshes, and boundary conditions exported from Sim4Life.</li> <li>Automated Workflow: Imports mesh and model data, assembles variational forms, applies boundary conditions, solves the problem, and exports results for visualization.</li> <li>Extensible Design: Modular structure allows for easy extension with new equations, boundary conditions, and post-processing routines.</li> <li>Real and Complex Problems: Supports both real-valued and complex-valued simulations, enabling a wide range of physical applications.</li> </ul>"},{"location":"#workflow-overview","title":"Workflow Overview","text":"<ol> <li>Input Preparation: Simulation definitions and mesh data are exported from Sim4Life as JSON and VTU files.</li> <li>Solver Initialization: The main solver script loads the input, prepares the mesh, and sets up the problem.</li> <li>Problem Assembly: Function spaces, variational forms, and boundary conditions are created based on the user-defined model.</li> <li>Solving: The appropriate solver is selected based on the simulation type (stationary, eigenvalue, or time-domain).</li> <li>Result Export: Simulation results are written to VTK files for visualization and further analysis.</li> </ol> <p>This design enables users to run complex finite element simulations within Sim4Life, while benefiting from the flexibility and power of the FEniCS library.</p>"},{"location":"#seamless-postprocessing-integration","title":"Seamless Postprocessing Integration","text":"<p>Simulation results produced by the FEniCS solver are fully compatible with the Sim4Life postprocessing pipeline. Results can be directly viewed, inspected, and analyzed using the integrated Sim4Life viewers, allowing for efficient visualization and further analysis without additional conversion steps.</p>"},{"location":"#examples","title":"Examples","text":"<ul> <li>Example 1: Poisson Equation on a Unit Square</li> <li>Example 2: Linear Elasticity in 2D</li> <li>Example 3: Heat Equation (Transient)</li> <li>Example 4: Laplace Equation on a Circle</li> </ul> <p>Explore each example for ready-to-use simulation setups and meshes.</p>"},{"location":"examples/example1/","title":"Example 1: Poisson Equation on a Unit Square","text":"<p>This example demonstrates how to solve the Poisson equation on a unit square domain using the FEniCS plugin in Sim4Life. The mesh and simulation setup are pre-configured for quick experimentation.</p> <ul> <li>Physics: Poisson equation</li> <li>Domain: Unit square</li> <li>Boundary conditions: Dirichlet (u=0 on boundary)</li> </ul>"},{"location":"examples/example1/#files","title":"Files","text":"<ul> <li><code>mesh.xml</code>: The mesh for the unit square domain.</li> <li><code>simulation_setup.json</code>: Pre-configured simulation setup for Sim4Life.</li> </ul>"},{"location":"examples/example1/#how-it-works","title":"How it works","text":"<p>The Poisson equation is solved with homogeneous Dirichlet boundary conditions. You can open this project in Sim4Life, inspect the mesh, and run the simulation directly.</p>"},{"location":"examples/example2/","title":"Example 2: Linear Elasticity in 2D","text":"<p>This example shows a simple linear elasticity simulation on a rectangular domain. The setup is ready to use in Sim4Life with the FEniCS plugin.</p> <ul> <li>Physics: Linear elasticity</li> <li>Domain: Rectangle</li> <li>Boundary conditions: Fixed left edge, traction on right edge</li> </ul>"},{"location":"examples/example2/#files","title":"Files","text":"<ul> <li><code>mesh.xml</code>: The mesh for the rectangular domain.</li> <li><code>simulation_setup.json</code>: Simulation setup for linear elasticity.</li> </ul>"},{"location":"examples/example2/#how-it-works","title":"How it works","text":"<p>The example demonstrates how to set up and solve a 2D elasticity problem. Open the project in Sim4Life to explore the setup and results.</p>"},{"location":"examples/example3/","title":"Example 3: Heat Equation (Transient)","text":"<p>This example solves the transient heat equation on a simple mesh. The simulation is pre-configured for time-dependent analysis in Sim4Life.</p> <ul> <li>Physics: Heat equation (transient)</li> <li>Domain: Square</li> <li>Boundary conditions: Insulated except one edge with fixed temperature</li> </ul>"},{"location":"examples/example3/#files","title":"Files","text":"<ul> <li><code>mesh.xml</code>: The mesh for the domain.</li> <li><code>simulation_setup.json</code>: Time-dependent simulation setup.</li> </ul>"},{"location":"examples/example3/#how-it-works","title":"How it works","text":"<p>This example illustrates how to run a transient simulation. You can modify the boundary conditions or material properties in Sim4Life for further exploration.</p>"},{"location":"examples/example4/","title":"Example 4: Laplace Equation on a Circle","text":"<p>This example demonstrates solving the Laplace equation on a circular domain. The mesh and setup are ready for use in Sim4Life with the FEniCS plugin.</p> <ul> <li>Physics: Laplace equation</li> <li>Domain: Circle</li> <li>Boundary conditions: Dirichlet (u=1 on boundary)</li> </ul>"},{"location":"examples/example4/#files","title":"Files","text":"<ul> <li><code>mesh.xml</code>: The mesh for the circular domain.</li> <li><code>simulation_setup.json</code>: Simulation setup for Laplace equation.</li> </ul>"},{"location":"examples/example4/#how-it-works","title":"How it works","text":"<p>Open the project in Sim4Life to visualize the mesh and run the Laplace simulation. You can experiment with different boundary conditions or source terms.</p>"},{"location":"examples/quantum_tunneling/","title":"Quantum Tunneling","text":"<p>This example can be loaded directly into Sim4Life by uploading the provided <code>.smash</code> and <code>.sims</code> files from the <code>files</code> subfolder. To do this, use the burger menu in the Sim4Life user interface and select the <code>.smash</code> file to load the complete example setup.</p> <p>This example demonstrates how to simulate quantum tunneling using the FEniCS plugin in Sim4Life. The setup models a Gaussian wave packet incident on a potential barrier, illustrating the fundamental quantum phenomenon of tunneling.</p>"},{"location":"examples/quantum_tunneling/#physics-background","title":"Physics Background","text":"<p>Quantum tunneling is a phenomenon where a quantum particle can pass through a potential barrier even if its energy is less than the barrier height. This is governed by the time-dependent Schr\u00f6dinger equation:</p> \\[ i \\frac{\\partial u}{\\partial t} = -\\frac{1}{2} \\nabla^2 u + V(x) u \\] <p>where \\(u(x, t)\\) is the wave function and \\(V(x)\\) is the potential (nonzero in the barrier region).</p>"},{"location":"examples/quantum_tunneling/#model-setup","title":"Model Setup","text":"<p>The computational domain is modeled as a rectangle, subdivided into two main regions: a central barrier and surrounding free space. This allows us to represent a potential barrier in the middle of the domain, with free propagation regions on either side. The mesh and subdomain assignments are shown below:</p> <p></p>"},{"location":"examples/quantum_tunneling/#simulation-setup","title":"Simulation Setup","text":""},{"location":"examples/quantum_tunneling/#1-simulation-settings","title":"1. Simulation Settings","text":"<p>We use the Time-Domain as the simulation type for this example.</p> <p></p>"},{"location":"examples/quantum_tunneling/#2-solver-settings","title":"2. Solver Settings","text":"<ul> <li>Field Type: Complex</li> <li>Solver Type: Linear (Direct LU)</li> <li>Time Domain Solver:</li> <li>Method: LobattoIIIA (Runge-Kutta)</li> <li>Stages: 3</li> <li>Initial Time Step: 0.001</li> <li>Max Time Step: 1</li> <li>Duration: 0.15</li> </ul>"},{"location":"examples/quantum_tunneling/#3-global-expressions","title":"3. Global Expressions","text":"<p>Global expressions define the physical parameters used in the simulation: - <code>k0 = 20</code> (wavenumber of the initial wave packet) - <code>E0 = 0.5*k0**2</code> (energy of the wave packet) - <code>DV = 10</code> (potential barrier height)</p> <p></p>"},{"location":"examples/quantum_tunneling/#4-equation","title":"4. Equation","text":"<p>The time-dependent Schr\u00f6dinger equation is solved for the wave function \\(u\\).</p> <ul> <li>Initial Condition: <code>python   ufl.exp(1j*x[1]*k0)*ufl.exp(-ufl.inner(x,x)/(2*0.5**2))</code>   This represents a Gaussian wave packet with wavenumber <code>k0</code>.</li> </ul> <p></p>"},{"location":"examples/quantum_tunneling/#5-free-space","title":"5. Free Space","text":"<ul> <li>Diffusion Coefficient: <code>-1/(2j)</code> (kinetic term)</li> <li>Linear Term: <code>0</code> (no potential in free space)</li> </ul>"},{"location":"examples/quantum_tunneling/#6-barrier","title":"6. Barrier","text":"<ul> <li>Diffusion Coefficient: <code>-1/(2j)</code> (kinetic term)</li> <li>Linear Term: <code>(E0 + DV)/(1j)</code> (potential energy in the barrier)</li> </ul>"},{"location":"examples/quantum_tunneling/#7-dirichlet-boundary-conditions","title":"7. Dirichlet Boundary Conditions","text":"<p>A Dirichlet boundary condition is applied: - Boundary Value: <code>0</code> (the wave function is set to zero on the specified boundary)</p> <p></p>"},{"location":"examples/quantum_tunneling/#how-the-physics-is-mapped","title":"How the Physics is Mapped","text":"<ul> <li>The diffusion coefficient \\(-1/(2j)\\) implements the kinetic term \\(-\\frac{1}{2} \\nabla^2 u\\).</li> <li>The linear term in the barrier region adds the potential energy.</li> <li>The weak form is constructed automatically by the plugin, following the variational principle.</li> </ul>"},{"location":"examples/quantum_tunneling/#running-the-simulation","title":"Running the Simulation","text":"<ol> <li>Set up the geometry and physics as shown above.</li> <li>Configure the solver and boundary conditions.</li> <li>Run the simulation in time-domain mode.</li> </ol> <p>The solver output will show progress through time steps and confirm successful completion.</p>"},{"location":"examples/quantum_tunneling/#results","title":"Results","text":"<p>The simulation produces the time evolution of the wave function, showing both reflection and tunneling through the barrier.</p> <p></p> <p>The results can be interactively inspected and visualized using the built-in viewers in Sim4Life, allowing you to explore the wave function dynamics over time.</p>"},{"location":"examples/quantum_tunneling/#references","title":"References","text":"<ul> <li>FEniCS Project</li> </ul>"}]}